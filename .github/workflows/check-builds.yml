# GitHub action workflow that checks the build process on multiple platforms.
#
# The workflow builds the code (without MPI and without MakeUp)
# using various compilers and operating systems, in different jobs.
# The workflow fails if there are any build errors and/or warnings.
#
name: Check builds

# workflow event trigger
on: pull_request

# jobs that run
jobs:

  # GCC on Ubuntu
  check_build_gcc:
    # job name, displayed in the action log
    name: Build using GCC on Ubuntu
    # run this job on the Github-provided runner with a recent Ubuntu version
    runs-on: ubuntu-22.04
    # steps that make up this job
    steps:
    # checkout using a recent version of the checkout action
    - name: Checkout
      uses: actions/checkout@v3
    # configure the build files through CMake
    - name: Configure
      run: cmake -B release -DCMAKE_BUILD_TYPE:STRING=Release -DWARNINGS_AS_ERRORS:BOOL=ON -DBUILD_DOX_STYLE:BOOL=ON -DBUILD_SMILE_SHAPES:BOOL=ON -DBUILD_SMILE_TOOL:BOOL=ON -L
    # perform the actual build (Ubuntu runners have 2 cores)
    - name: Build
      run: make -C release -j 2

  # Clang on macOS
  check_build_clang:
    # job name, displayed in the action log
    name: Build using Clang on macOS
    # run this job on the Github-provided runner with a recent macOS version
    runs-on: macos-14
    # steps that make up this job
    steps:
    # checkout using a recent version of the checkout action
    - name: Checkout
      uses: actions/checkout@v3
    # configure the build files through CMake
    - name: Configure
      run: cmake -B release -DCMAKE_BUILD_TYPE:STRING=Release -DWARNINGS_AS_ERRORS:BOOL=ON -DBUILD_DOX_STYLE:BOOL=ON -DBUILD_SMILE_SHAPES:BOOL=ON -DBUILD_SMILE_TOOL:BOOL=ON -L
    # perform the actual build (mac OS runners have 3 cores)
    - name: Build
      run: make -C release -j 3

  # MinGW-64 on Windows
  check_build_mingw:
    # job name, displayed in the action log
    name: Build using MinGW-64 on Windows
    # run this job on the Github-provided runner with a recent Windows version
    runs-on: windows-2022
    # steps that make up this job
    steps:
    # checkout using a recent version of the checkout action
    - name: Checkout
      uses: actions/checkout@v3
    # configure the build files through CMake
    - name: Configure
      run: cmake -G "MinGW Makefiles" -B release -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_EXE_LINKER_FLAGS="-static" -DWARNINGS_AS_ERRORS:BOOL=ON -DBUILD_DOX_STYLE:BOOL=ON -DBUILD_SMILE_SHAPES:BOOL=ON -DBUILD_SMILE_TOOL:BOOL=ON -L
    # perform the actual build (Windows runners have 2 cores)
    - name: Build
      run: make -C release -j 2

  # MSVC on Windows
  check_build_msvc:
    # job name, displayed in the action log
    name: Build using MSVC on Windows
    # run this job on the Github-provided runner with a recent Windows version
    runs-on: windows-2022
    # steps that make up this job
    steps:
    # checkout using a recent version of the checkout action
    - name: Checkout
      uses: actions/checkout@v3
    # configure the build files through CMake
    - name: Configure
      shell: cmd
      run: cmake -B release -DCMAKE_BUILD_TYPE:STRING=Release -DWARNINGS_AS_ERRORS:BOOL=ON -DBUILD_DOX_STYLE:BOOL=ON -DBUILD_SMILE_SHAPES:BOOL=ON -DBUILD_SMILE_TOOL:BOOL=ON -L
    # perform the actual build (Windows runners have 2 cores)
    - name: Build
      shell: cmd
      run: cd release && cmake --build . -j 2

  # Intel on Ubuntu
  check_build_intel:
    # job name, displayed in the action log
    name: Build using Intel oneAPI on Ubuntu
    # run this job on the Github-provided runner with a recent Ubuntu version
    runs-on: ubuntu-22.04
    # steps that make up this job
    steps:
    # checkout using a recent version of the checkout action
    - name: Checkout
      uses: actions/checkout@v3
    # add Intel oneAPI to apt repository
    - name: add oneAPI to apt
      run: |
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt update
    # install Intel oneAPI
    - name: install oneAPI
      run: sudo apt install intel-oneapi-compiler-dpcpp-cpp
    # configure the build files through CMake
    - name: Configure
      run: cmake -B release -DCMAKE_C_COMPILER=/opt/intel/oneapi/compiler/latest/bin/icx -DCMAKE_CXX_COMPILER=/opt/intel/oneapi/compiler/latest/bin/icpx -DCMAKE_BUILD_TYPE:STRING=Release -DWARNINGS_AS_ERRORS:BOOL=ON -DBUILD_DOX_STYLE:BOOL=ON -DBUILD_SMILE_SHAPES:BOOL=ON -DBUILD_SMILE_TOOL:BOOL=ON -L
    # perform the actual build (Ubuntu runners have 2 cores)
    - name: Build
      run: make -C release -j 2

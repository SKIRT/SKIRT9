/*//////////////////////////////////////////////////////////////////
////     The SKIRT project -- advanced radiative transfer       ////
////       Â© Astronomical Observatory, Ghent University         ////
///////////////////////////////////////////////////////////////// */

#include "QuarticSplineSmoothingKernel.hpp"
#include "NR.hpp"
#include "Random.hpp"

//////////////////////////////////////////////////////////////////////

namespace
{
    const int _Nu = 400;
}

//////////////////////////////////////////////////////////////////////

void QuarticSplineSmoothingKernel::setupSelfBefore()
{
    SmoothingKernel::setupSelfBefore();

    double du = 1. / _Nu;
    _Xv.resize(_Nu + 1);
    for (int k = 0; k <= _Nu; k++)
    {
        double u = k * du;
        double u2 = u * u;
        double u3 = u2 * u;
        double u4 = u2 * u2;
        double u5 = u3 * u2;
        double u6 = u3 * u3;
        double u7 = u4 * u3;

        if (u < 0.2)
            _Xv[k] = 104.63169642857142857 * u7 - 58.59375 * u5 + 14.973958333333333333 * u3;
        else if (u < 0.6)
            _Xv[k] = -69.754464285714285714 * u7 + 162.76041666666666667 * u6 - 117.1875 * u5 + 9.765625 * u4
                     + 14.322916666666666667 * u3 + 0.00014880952380952380952;
        else
            _Xv[k] = 17.438616071428571429 * u7 - 81.380208333333333333 * u6 + 146.484375 * u5 - 122.0703125 * u4
                     + 40.690104166666666667 * u3 - 0.1625744047619047619;
    }
}

//////////////////////////////////////////////////////////////////////

double QuarticSplineSmoothingKernel::density(double u) const
{
    if (u < 0. || u >= 1.) return 0.;

    double u2 = u * u;
    double u3 = u2 * u;
    double u4 = u2 * u2;

    if (u < 0.2) return 58.284280917442139563 * u4 - 23.313712366976855825 * u2 + 3.5747692296031178931;

    if (u < 0.6)
        return -38.856187278294759708 * u4 + 77.712374556589519415 * u3 - 46.627424733953711649 * u2
               + 3.1084949822635807767 * u + 3.4193444804899388544;

    return 9.7140468195736899271 * u4 - 38.856187278294759708 * u3 + 58.284280917442139563 * u2
           - 38.856187278294759708 * u + 9.7140468195736899271;
}

//////////////////////////////////////////////////////////////////////

double QuarticSplineSmoothingKernel::columnDensity(double q) const
{
    if (q < 0. || q >= 1.) return 0.;

    if (q < 0.12)
    {
        double t = q;
        double t2 = t * t;
        double t4 = t2 * t2;
        double t6 = t4 * t2;
        double t8 = t4 * t4;
        return 2.3873241463784300365 - 16.433705316825144928 * t2 + 49.145275174383836633 * t4
               - 51.8082497043930135 * t6 - 62.121929043693478 * t8;
    }
    if (q < 0.2)
    {
        double t = 0.2 - q;
        double t2 = t * t;
        double t3 = t2 * t;
        double t4 = t2 * t2;
        double t5 = t3 * t2;
        double t6 = t4 * t2;
        double t7 = t4 * t3;
        double t8 = t4 * t4;
        double t0p5 = sqrt(t);
        double t4p5 = t4 * t0p5;
        double t5p5 = t5 * t0p5;
        double t6p5 = t6 * t0p5;
        double t7p5 = t7 * t0p5;
        double t8p5 = t8 * t0p5;
        return 1.8050996346751199567 + 5.1085377611061859131 * t - 6.0426644458233297408 * t2
               - 29.044461591571969499 * t3 - 5.3584763466627431683 * t4 + 49.929773913181582376 * t4p5
               + 60.006368670616469473 * t5 - 107.80292094891478013 * t5p5 + 91.294036317427710066 * t6
               - 117.56846894985392266 * t6p5 + 159.54515542832370822 * t7 - 258.80066105840814182 * t7p5
               + 421.53362758745520569 * t8 - 718.02366037805996392 * t8p5;
    }
    if (q < 0.275)
    {
        double t = 0.2 - q;
        double t2 = t * t;
        double t3 = t2 * t;
        double t4 = t2 * t2;
        double t5 = t3 * t2;
        double t6 = t4 * t2;
        double t7 = t4 * t3;
        double t8 = t4 * t4;
        return 1.8050996346751199567 + 5.1085377611061859131 * t - 6.0426644458233297408 * t2
               - 29.044461591571969499 * t3 - 5.3584763466627431683 * t4 + 60.006368670616469473 * t5
               + 91.294036317427710066 * t6 + 159.54515542832370822 * t7 + 421.53362758745520569 * t8;
    }
    if (q < 0.5)
    {
        double t = 0.4 - q;
        double t2 = t * t;
        double t3 = t2 * t;
        double t4 = t2 * t2;
        double t5 = t3 * t2;
        double t6 = t4 * t2;
        double t7 = t4 * t3;
        double t8 = t4 * t4;
        return 0.75075459911361979413 + 4.5616510066839823997 * t + 6.8523773917461747459 * t2
               - 10.490597471182976506 * t3 - 32.139463566402553425 * t4 + 3.425358491527271111 * t5
               + 33.119680268204379281 * t6 - 2.53319455419320593 * t7 + 33.58279883777643405 * t8;
    }
    if (q < 0.6)
    {
        double t = 0.6 - q;
        double t2 = t * t;
        double t3 = t2 * t;
        double t4 = t2 * t2;
        double t5 = t3 * t2;
        double t6 = t4 * t2;
        double t7 = t4 * t3;
        double t8 = t4 * t4;
        double t0p5 = sqrt(t);
        double t4p5 = t4 * t0p5;
        double t5p5 = t5 * t0p5;
        double t6p5 = t6 * t0p5;
        double t7p5 = t7 * t0p5;
        double t8p5 = t8 * t0p5;
        return 0.14619491337065078731 + 1.5478560158522359757 * t + 6.0733180602213711999 * t2
               + 9.8328564181550724473 * t3 + 2.2350959007500880641 * t4 - 43.240452614028811170 * t4p5
               - 10.517554396007563045 * t5 + 31.120022714641947433 * t5p5 - 9.7596438757612464707 * t6
               + 11.313031199401720094 * t6p5 - 5.3736134434994958245 * t7 + 8.3010350738069465889 * t7p5
               - 6.2612732655640592184 * t8 + 7.6768732148850619889 * t8p5;
    }
    if (q < 0.7)
    {
        double t = 0.6 - q;
        double t2 = t * t;
        double t3 = t2 * t;
        double t4 = t2 * t2;
        double t5 = t3 * t2;
        double t6 = t4 * t2;
        double t7 = t4 * t3;
        double t8 = t4 * t4;
        return 0.14619491337065078728 + 1.5478560158522359745 * t + 6.0733180602213711989 * t2
               + 9.8328564181550724463 * t3 + 2.2350959007500880636 * t4 - 10.517554396007563045 * t5
               - 9.7596438757612464707 * t6 - 5.3736134434994958245 * t7 - 6.2612732655640592184 * t8;
    }
    if (q < 0.9)
    {
        double t = 0.8 - q;
        double t2 = t * t;
        double t3 = t2 * t;
        double t4 = t2 * t2;
        double t5 = t3 * t2;
        double t6 = t4 * t2;
        double t7 = t4 * t3;
        double t8 = t4 * t4;
        return 0.0072657407478468264017 + 0.15968176444862743171 * t + 1.3439943081491219364 * t2
               + 5.1893694464311641467 * t3 + 7.8495176970746088828 * t4 - 1.1940182549059327202 * t5
               - 7.3197329068209348530 * t6 + 1.7427935492430797269 * t7 - 6.1421369877837705652 * t8;
    }
    {
        double t = 1. - q;
        double t2 = t * t;
        double t3 = t2 * t;
        double t4 = t2 * t2;
        double t5 = t3 * t2;
        double t6 = t4 * t2;
        double t7 = t4 * t3;
        double t8 = t4 * t4;
        double t0p5 = sqrt(t);
        double t4p5 = t4 * t0p5;
        double t5p5 = t5 * t0p5;
        double t6p5 = t6 * t0p5;
        double t7p5 = t7 * t0p5;
        double t8p5 = t8 * t0p5;
        return 11.164636857106970108 * t4p5 - 4.8210931882961916376 * t5p5 - 1.0515643543297867388 * t6p5
               - 0.46295669659878662110 * t7p5 - 0.25688795424937030815 * t8p5;
    }
}

//////////////////////////////////////////////////////////////////////

double QuarticSplineSmoothingKernel::generateRadius() const
{
    double X = random()->uniform();
    int k = NR::locateClip(_Xv, X);
    double p = (X - _Xv[k]) / (_Xv[k + 1] - _Xv[k]);
    double u = (k + p) / _Nu;
    return u;
}

//////////////////////////////////////////////////////////////////////

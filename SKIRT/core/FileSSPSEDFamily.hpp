/*//////////////////////////////////////////////////////////////////
////     The SKIRT project -- advanced radiative transfer       ////
////       Â© Astronomical Observatory, Ghent University         ////
///////////////////////////////////////////////////////////////// */

#ifndef FILESSPSEDFAMILY_HPP
#define FILESSPSEDFAMILY_HPP

#include "SEDFamily.hpp"
#include "StoredTable.hpp"

//////////////////////////////////////////////////////////////////////

/** An instance of the FileSSPSEDFamily class represents a family of single stellar populations
    (SSPs) for which the SED templates, parameterized on metallicity and age and scaled by the
    initial mass of the SSP, are provided by the user. For example, the SED templates may be
    generated by the Flexible Stellar Population Synthesis (FSPS) code (Conroy, Gunn, & White
    (2009, ApJ, 699, 486) and Conroy & Gunn (2010, ApJ, 712, 833)) and subsequently converted to
    the appropriate SKIRT stored table format. For more information on the workflow to be followed,
    refer to the documentation of the "storedtable/do/fsps_to_stored_table.py" script in the Python
    for SKIRT toolkit (PTS).

    The stored table file (with ".stab" filename extension) provided to this class must have three
    axes labeled lambda(m), Z(1), and t(yr), and a quantity labeled Llambda(W/m) with units as
    listed between parenthesis.

    When imported from a text column file, the parameters for this %SED family must appear in the
    following order in the specified default units (unless these units are overridden by column
    header info): \f[ M_\mathrm{init}\,(\mathrm{M}_\odot) \quad Z\,(\mathrm{dimensionless}) \quad
    t\,(\mathrm{yr}) \f] */
class FileSSPSEDFamily : public SEDFamily
{
    ITEM_CONCRETE(FileSSPSEDFamily, SEDFamily, "a user-provided SED family for single stellar populations")
    PROPERTY_STRING(filename, "the name of the stored table file defining the SED templates")
    ITEM_END()

    //============= Construction - Setup - Destruction =============

protected:
    /** This function opens the user-specified resource file (in SKIRT stored table format). */
    void setupSelfBefore() override;

    //====================== Other functions =====================

public:
    /** This function returns the number and type of parameters used by this particular %SED family
        as a list of SnapshotParameter objects. Each of these objects specifies unit information
        and a human-readable descripton for the parameter. */
    vector<SnapshotParameter> parameterInfo() const override;

    /** This function returns the intrinsic wavelength range of the %SED family. It retrieves this
        range from the underlying stored table. */
    Range intrinsicWavelengthRange() const override;

    /** This function returns the specific luminosity \f$L_\lambda\f$ (i.e. radiative power per
        unit of wavelength) for the %SED with the specified parameters at the specified wavelength,
        or zero if the wavelength is outside of the %SED's intrinsic wavelength range. The number
        and type of parameters must match the information returned by the parameterInfo() function;
        if not the behavior is undefined. */
    double specificLuminosity(double wavelength, const Array& parameters) const override;

    /** This function constructs both the normalized probability density function (pdf) and the
        corresponding normalized cumulative distribution function (cdf) for the %SED with the
        specified parameters over the specified wavelength range. The function returns the
        normalization factor. The number and type of parameters must match the information returned
        by the parameterInfo() function; if not the behavior is undefined. */
    double cdf(Array& lambdav, Array& pv, Array& Pv,
               const Range& wavelengthRange, const Array& parameters) const override;

    //====================== Data members =====================

private:
    StoredTable<3> _table;
};

////////////////////////////////////////////////////////////////////

#endif

/*//////////////////////////////////////////////////////////////////
////     The SKIRT project -- advanced radiative transfer       ////
////       Â© Astronomical Observatory, Ghent University         ////
///////////////////////////////////////////////////////////////// */

#ifndef FSPSSEDFAMILY_HPP
#define FSPSSEDFAMILY_HPP

#include "SEDFamily.hpp"
#include "StoredTable.hpp"

//////////////////////////////////////////////////////////////////////

/** An instance of the FSPSSEDFamily class represents a family of single stellar populations (SSPs)
    generated by the Flexible Stellar Population Synthesis (FSPS) code presented by Conroy, Gunn, &
    White (2009, ApJ, 699, 486) and Conroy & Gunn (2010, ApJ, 712, 833). The SED templates are
    parameterized on metallicity and age and scaled by the initial mass of the SSP.

    We used the version of the FSPS code with git hash 182e2b4 committed on August 25, 2019,
    obtained from https://github.com/cconroy20/fsps. We did not make any changes to the code and
    its default compile-time and run-time configuration values. We created a custom main program to
    generate the output, overriding some of the run-time configuration values, including the choice
    of IMF. As a result, we generated SED families using the default MIST isochrones and the
    default MILES spectral libraries, for each of the Salpeter, Chabrier and Kroupa IMFs. We
    excluded dust attenuation and emission, as well as nebular emission. Otherwise, the default
    values are used for all parameters.

    The SEDs are tabulated over a wavelength range from 0.009 \f$\mu\mathrm{m}\f$ to 10000
    \f$\mu\mathrm{m}\f$ with the spectral resolution shown in the figure below.

    \image html FSPSSEDFamily.png

    When imported from a text column file, the parameters for this %SED family must appear in the
    following order in the specified default units (unless these units are overridden by column
    header info): \f[ M_\mathrm{init}\,(\mathrm{M}_\odot) \quad Z\,(\mathrm{dimensionless}) \quad
    t\,(\mathrm{yr}) \f] */
class FSPSSEDFamily : public SEDFamily
{
    /** The enumeration type indicating the assumed initial mass function (IMF). */
    ENUM_DEF(IMF, Chabrier, Kroupa, Salpeter)
        ENUM_VAL(IMF, Chabrier, "Chabrier IMF")
        ENUM_VAL(IMF, Kroupa, "Kroupa IMF")
        ENUM_VAL(IMF, Salpeter, "Salpeter IMF")
    ENUM_END()

    ITEM_CONCRETE(FSPSSEDFamily, SEDFamily, "an FSPS SED family for single stellar populations")

        PROPERTY_ENUM(imf, IMF, "the assumed initial mass function")
        ATTRIBUTE_DEFAULT_VALUE(imf, "Chabrier")

    ITEM_END()

    //============= Construction - Setup - Destruction =============

public:
    /** This constructor can be invoked programmatically by classes that use a hard-coded SED
        family (as opposed to selected through the ski file). Before the constructor returns, the
        newly created object is hooked up as a child to the specified parent in the simulation
        hierarchy (so it will automatically be deleted), and its setup() function has been called.
        */
    explicit FSPSSEDFamily(SimulationItem* parent, IMF imf);

protected:
    /** This function opens the appropriate resource file (in SKIRT stored table format). */
    void setupSelfBefore() override;

    //====================== Other functions =====================

public:
    /** This function returns the number and type of parameters used by this particular %SED family
        as a list of SnapshotParameter objects. Each of these objects specifies unit information
        and a human-readable descripton for the parameter. */
    vector<SnapshotParameter> parameterInfo() const override;

    /** This function returns the intrinsic wavelength range of the %SED family. It retrieves this
        range from the underlying stored table. */
    Range intrinsicWavelengthRange() const override;

    /** This function returns the specific luminosity \f$L_\lambda\f$ (i.e. radiative power per
        unit of wavelength) for the %SED with the specified parameters at the specified wavelength,
        or zero if the wavelength is outside of the %SED's intrinsic wavelength range. The number
        and type of parameters must match the information returned by the parameterInfo() function;
        if not the behavior is undefined. */
    double specificLuminosity(double wavelength, const Array& parameters) const override;

    /** This function constructs both the normalized probability density function (pdf) and the
        corresponding normalized cumulative distribution function (cdf) for the %SED with the
        specified parameters over the specified wavelength range. The function returns the
        normalization factor. The number and type of parameters must match the information returned
        by the parameterInfo() function; if not the behavior is undefined. */
    double cdf(Array& lambdav, Array& pv, Array& Pv, const Range& wavelengthRange,
               const Array& parameters) const override;

    //====================== Data members =====================

private:
    StoredTable<3> _table;
};

////////////////////////////////////////////////////////////////////

#endif
